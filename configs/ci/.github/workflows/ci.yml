# ---
# ems_section: "10-deployment-ci-cd-enhancements"
# ems_subsection: "workflow-ci"
# ems_type: "config"
# ems_scope: "automation"
# ems_description: "CI workflow running lint, tests, and builds."
# ems_version: "v0.0.0-prealpha"
# ems_owner: "Ocean Batteries / R-EMS Maintainers"
# ---
name: deployment-ci

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  R_EMS_LOG: debug

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Cache cargo directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lint-${{ hashFiles('**/Cargo.lock') }}
      - name: Cargo fmt
        run: cargo fmt --all -- --check
      - name: Cargo clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Restore cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lint-
      - name: Cargo test
        run: cargo test --workspace --all-targets

  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - name: Restore cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Build release binary
        run: cargo build --release --bin r-emsd --target ${{ matrix.target }}
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: r-emsd-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/r-emsd

  docker-images:
    name: Build Multi-Arch Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build multi-arch image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --build-arg APP_VERSION=${{ github.sha }} \
            --output=type=oci,dest=./r-ems-${{ github.sha }}.tar \
            -f deploy/Dockerfile .
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: r-ems-image-${{ github.sha }}
          path: r-ems-${{ github.sha }}.tar