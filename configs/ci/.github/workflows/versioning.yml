# ---
# ems_section: "14-versioning-licensing-system"
# ems_subsection: "workflow-versioning"
# ems_type: "config"
# ems_scope: "automation"
# ems_description: "Versioning compliance workflow."
# ems_version: "v0.0.0-prealpha"
# ems_owner: "Ocean Batteries / R-EMS Maintainers"
# ---
name: Versioning Policy

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  branch-policy:
    name: Branch naming guard
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch naming convention
        env:
          BRANCH: ${{ github.head_ref }}
        run: |
          echo "Checking branch name: ${BRANCH}"
          if [[ "${BRANCH}" =~ ^(main|develop|feature\/.+|release\/.+)$ ]]; then
            exit 0
          fi
          echo "Branch '${BRANCH}' does not match allowed patterns (main, develop, feature/*, release/*)."
          exit 1

  version-bump:
    name: Require workspace version bump
    runs-on: ubuntu-latest
    needs: branch-policy
    if: github.event.pull_request.base.ref == 'main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure workspace version increased
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          python3 - <<'PY'
          import os
          import subprocess
          import sys
          try:
              import tomllib  # Python 3.11+
          except ModuleNotFoundError:
              import tomli as tomllib  # type: ignore

          base_sha = os.environ["BASE_SHA"]
          old_raw = subprocess.check_output(["git", "show", f"{base_sha}:Cargo.toml"])
          old = tomllib.loads(old_raw.decode())
          with open("Cargo.toml", "rb") as handle:
              new = tomllib.loads(handle.read().decode())
          old_version = old["workspace"]["package"]["version"]
          new_version = new["workspace"]["package"]["version"]
          if old_version == new_version:
              print(f"Workspace version unchanged ({old_version}) relative to base commit")
              sys.exit(1)
          print(f"Workspace version bump detected: {old_version} -> {new_version}")
          PY